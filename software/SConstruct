# OpenAlchemist SCONS file

# IMPORT
import zipfile, os

# CONFIGURATION
BIN_NAME = "openalchemist"

FILES = "bin/Application.cpp bin/Preferences.cpp bin/IniFile.cpp bin/GameEngine.cpp bin/states/GameState.cpp bin/states/CommonState.cpp bin/misc.cpp bin/CommonResources.cpp bin/Player.cpp bin/HumanPlayer.cpp bin/DemoPlayer.cpp bin/Board.cpp bin/states/InGameState.cpp bin/states/GameOverState.cpp bin/ProgressBar.cpp bin/states/HighScoreState.cpp bin/FrontLayer.cpp bin/states/PauseMenuState.cpp bin/states/SkinsMenuState.cpp bin/Keys.cpp bin/states/OptionsMenuState.cpp bin/states/TitleState.cpp bin/states/QuitMenuState.cpp"

CXXFLAGS = "-Wall `pkg-config --cflags clanCore-0.8 clanDisplay-0.8 clanApp-0.8 clanGL-0.8 clanSDL-0.8`"

CPPPATH = ""

LIBS = "pkg-config --libs clanCore-0.8 clanDisplay-0.8 clanApp-0.8 clanGL-0.8 clanSDL-0.8"

INCLUDES_ENV = "pkg-config --cflags clanCore-0.8 clanDisplay-0.8 clanApp-0.8 clanGL-0.8 clanSDL-0.8"

STATIC_LIBS = "/usr/local/lib/libclanApp.a /usr/local/lib/libclanSDL.a /usr/local/lib/libclanDisplay.a /usr/local/lib/libclanGL.a /usr/local/lib/libclanCore.a /usr/local/lib/libclanSignals.a /usr/lib/libpng.a /usr/lib/libjpeg.a /usr/lib/libz.a /usr/lib/libXmu.a /usr/lib/libXi.a /usr/lib/libXxf86vm.a /usr/lib/libm.a /usr/lib/libGLU.a -lGL `sdl-config --static-libs`"

INCLUDES_TO_CHECK = "vector list ClanLib/core.h ClanLib/application.h ClanLib/gl.h ClanLib/display.h"

LIBS_TO_CHECK = "clanCore clanDisplay clanSignals clanApp clanGL clanSDL"

# CONFIGURING ENVIRONNEMENT
env = Environment()
env.ParseConfig(LIBS)
conf = Configure(env)

# CHECKING LIBRAIRIES
# for h in Split(INCLUDES_TO_CHECK):
#        if not conf.CheckCXXHeader(h):
#                print h+' must be installed!'
#                Exit(1)

# CHECKING LIBRAIRIES
#for l in Split(LIBS_TO_CHECK):
#        if not conf.CheckLib(l):
#                print "lib: "+l+' must be installed!'
#                Exit(1)


env = conf.Finish()

# BUILDIND THE SOFTWARE
BuildDir('bin', 'src')
opt = env.Program(BIN_NAME, Split(FILES), CPPPATH = Split(CPPPATH), CXXFLAGS=CXXFLAGS)
Default(opt)


# FUNCTION TO MAKE ZIP (SKINS)
def zipFile(dir):
        oldpath = os.getcwd()
        f = zipfile.ZipFile(dir+'.zip','w',zipfile.ZIP_DEFLATED)
        os.chdir(dir)
        for root, dirs, files in os.walk('.'):
                if '.sconsign' in files:
                        files.remove('.sconsign')
                
                for afile in files:
                        rroot = root[2:]
                        if not rroot:
                                f.write(afile)
                        else:
                                #print root[2:]+"/"+afile
                                aafile = root[2:]+"/"+afile
                                f.write(aafile)
                
                if '.svn' in dirs:
                        dirs.remove('.svn')  # don't visit SVN directories
        f.close()
        os.chdir(oldpath)
        print dir+" zip created"

# SKINS GENERATION
zipFile('skins/aqua')
zipFile('skins/brushed')
zipFile('skins/vectoriel')



